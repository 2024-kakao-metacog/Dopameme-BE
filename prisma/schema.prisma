// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// Define at src/database.service.ts
datasource db {
  provider = "postgresql"
  url      = ""
}
//////////////////// Do not edit the above part ////////////////////
//
//
//
//////////////////// Define your model below /////////////////////
//// Example model
// model User {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   password  String
//   createdAt DateTime @default(now())
// }

model User {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id") @unique @db.VarChar(16)
  passwordHash String   @map("password_hash") @db.Char(64)
  nickname     String   @unique @db.VarChar(16)
  createdAt    DateTime @map("created_at")

  videos       Video[]
  notifications Notification[]
  following  Follow[] @relation("Following")
  followed   Follow[] @relation("Followers")
}

model Video {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id") @unique
  title         String   @db.VarChar(100)
  videoUrl      String   @map("video_url") @db.VarChar(256)
  thumbnailUrl  String   @map("thumbnail_url") @db.VarChar(256)
  isCrawl       Boolean  @map("is_crawl")
  publishedAt   DateTime @map("published_at")

  user          User     @relation(fields: [userId], references: [id])
  notifications Notification[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id") @unique
  videoId   Int      @map("video_id") @unique
  isRead    Boolean  @map("is_read")
  createdAt DateTime @map("created_at")

  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model Follow {
  id              Int      @id @default(autoincrement())
  followingUserId Int      @map("following_user_id") @unique
  followedUserId  Int      @map("followed_user_id") @unique
  createdAt       DateTime @default(now()) @map("created_at")

  following       User     @relation("Following", fields: [followingUserId], references: [id])
  followed        User     @relation("Followers", fields: [followedUserId], references: [id])
}